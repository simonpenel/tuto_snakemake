## Main snakemake for domain analysis on protein data
## Date : Decembre 2024
## Authors :


# Import python modules
# ---------------------
import os
import json

# Function to load JSON files
# ---------------------------
def load_json(file_path):
    with open(file_path, "r") as file:
        return json.load(file)

# Assign environment variables
# ----------------------------
globals().update(load_json("../environment_path.json"))


# Configuration
# -------------
configfile: "analyse.json"
configfile: "assemblies.json"


# List of assemblies
# ------------------
ACCESSNB = config["assembly_list"]

# Name of the resources directory. The name is  used  pathGTDriftResource:
# it contains the resources used by the analyse (the fasta alignment files)
# and generated by the analysis (the hmm profiles and databases)
# The directories are structured as follows
# RESOURCES_DIR_NAME/
# ...........reference_alignments/ (should be present at start)
# .............................. DOMAIN1/
# ...................................... Reference_alignement_DOMAIN1.fst
# .......................................[Paralogous_alignement_DOMAIN1.fst](if DOMAIN1 is selected for paralogous analysis) 
# .......................................[Paralogous_alignement_DOMAIN1.fst](if DOMAIN1 is selected for paralogous analysis) 
# ...............................DOMAIN2/
# .......................................Reference_alignement_DOMAIN2.fst
# .......................................[Paralogous_alignement_DOMAIN2.fst](if DOMAIN2 is selected for paralogous analysis) 
# .......................................[Paralogous_alignement_DOMAIN2.fst](if DOMAIN2 is selected for paralogous analysis) 
# ...........hmm_profiles/ (will be generated by the pipeline)
# ........................DOMAIN1/
# ............................... Reference_alignement_DOMAIN1.hmm
# ................................[Paralogous_alignement_DOMAIN1.hmm](if DOMAIN1 is selected for paralogous analysis) 
# ................................[Paralogous_alignement_DOMAIN1.hmm](if DOMAIN1 is selected for paralogous analysis) 
# ........................DOMAIN2/
# ................................Reference_alignement_DOMAIN2.hmm
# ............................... [Paralogous_alignement_DOMAIN2.hmm](if DOMAIN2 is selected for paralogous analysis) 
# ................................[Paralogous_alignement_DOMAIN2.hmm](if DOMAIN2 is selected for paralogous analysis) 
# ...........hmm_databases/ (will be generated by the pipeline)
# ........................[database_DOMAIN1.hmm{.h3i,.h3f,.h3m.h3p}] (if DOMAIN1 is selected for paralogous analysis)
# ........................[database_DOMAIN2.hmm{.h3i,.h3f,.h3m.h3p}] (if DOMAIN2 is selected for paralogous analysis)
# -------------------------------------------------------------------------------------------------------------------
#ANALYSE_DIR= config["analyse_dir_name"]



RESOURCES_DIR_NAME  = config["resources_dir_name"]

# The reference alignment of each domain 
# ---------------------------------------
DOMAIN_REFERENCES = config["domain_references"]

# List of domains to be fully processed. 
# --------------------------------------
DOMAINS = config["domains"]

# List of domains to be processed without paralogy checks. 
# --------------------------------------------------------
DOMAINS_SIMPLE = config["domains_simple"]

# Name of global results directory.
# The directory is located in pathGTDriftGlobalResults
# ----------------------------------------------------
GLOBAL_RESULTS = config["analyse_dir_name"]

# Name of genome specific results directory.
# The directory is located in genome_assembly/{accession}/analyses/
# -----------------------------------------------------------------
GENOME_RESULTS = config["analyse_dir_name"]

# config for hmm
# --------------
if config["mode"] == "guix":
    RUNCMD = "guix shell hmmer -- "
else:
    RUNCMD = ""
    
for domain in    DOMAINS :
    if domain in DOMAINS_SIMPLE:
        print("Error : the domain "+domain+" is both in DOMAINS and DOMAINS_SIMPLE")
        sys.exit()
# function to get the name of the reference alignment for a domain
# ----------------------------------------------------------------
def get_domain(wildcards):
    domain = wildcards.domain
    return domain 
      
# function to get the name of the reference alignment for a domain
# ----------------------------------------------------------------
def get_reference(wildcards):
    fname = DOMAIN_REFERENCES.get(wildcards.domain, "")
    return fname 

# function to get the path of the reference alignment for a domain
# ----------------------------------------------------------------
def get_reference_file(wildcards):
    fname = DOMAIN_REFERENCES.get(wildcards.domain, "")
    domain = wildcards.domain
    return pathGTDriftResource + RESOURCES_DIR_NAME + "hmm_profiles/"+ domain+"/"+fname+".hmm"

# get the files and directories describing the reference alignments
# -----------------------------------------------------------------   
directories, files = glob_wildcards(pathGTDriftResource + RESOURCES_DIR_NAME + "reference_alignments/{dir}/{file}.fst")

# Rules
# -----

# -----------------------------------------------
# all : inputs define the to be files generated . 
# -----------------------------------------------
rule all:
    """
    Generate the candidates in fasta format and a summary of candidates in genomes.
    """
    input:
        # Candidates sequences with all domains ("wad") in fasta format for each genome
        # -----------------------------------------------------------------------------
        candidates_wad_fasta=expand(
            pathGTDriftData
           + "genome_assembly/{accession}/analyses/" + GENOME_RESULTS
           + "selected_candidates.fasta", accession=ACCESSNB),
  
        # Candidates sequences with 1 confirmed domain in fasta format for each genome
        # -----------------------------------------------------------------------------         
        candidates_domain_fasta=expand(
            pathGTDriftData
           + "genome_assembly/{accession}/analyses/" + GENOME_RESULTS
           + "candidates_{domain}.fasta", accession=ACCESSNB,domain=DOMAINS),
                              
        # Concatenation of results on all genomes
        # ----------------------------------------
        concat_assemblies=pathGTDriftGlobalResults + GLOBAL_RESULTS + "results.csv",              
          
        # Statistics on all domains for all genomes
        # -----------------------------------------                
        all_domains_stats_summary=pathGTDriftGlobalResults + GLOBAL_RESULTS + "statistics_summary.csv",
  
        # Statistics on candidates with all domains for all genomes
        # ---------------------------------------------------------           
        all_candidates_stats_summary=pathGTDriftGlobalResults + GLOBAL_RESULTS + "candidate_statistics_summary.csv"    
        
               

# Modules snakemake
# -----------------

include: "../utils/module_stats_domain.smk"
include: "../utils/module_check_paralogs.smk"
include: "../utils/module_hmm.smk"
include: "../utils/module_concatenate.smk"
